<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sArrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

angle = 0;
weight = 0.3;

initialCollision = true;
attachedEntity = noone;

hspd = 0;
vspd = 0;
hsave = 0;
vsave = 0;

statusEffect = noone;
fireActive = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// AoE / Visual FX

switch(statusEffect)
{
    case global.ITEM_Bomb:
    {
        DoBombAoE(x, y);
        FxSmoke(x, y, 12);
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Kill fire after it hits the ground
fireActive = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Image Angle

if (hspd != 0 &amp;&amp; vspd != 0)
{
    var refAngle = radtodeg(arctan(abs(vspd) / abs(hspd)));
    var newAngle = 0;
    
    if (hspd &gt; 0 &amp;&amp; vspd &lt; 0)
        newAngle = refAngle;
    
    if (hspd &gt; 0 &amp;&amp; vspd &gt; 0)
        newAngle = -refAngle;
        
    if (hspd &lt; 0 &amp;&amp; vspd &lt; 0)
        newAngle = 180 - refAngle;
    
    if (hspd &lt; 0 &amp;&amp; vspd &gt; 0)
        newAngle = 180 + refAngle;
        
    angle = lerp(angle, newAngle, 0.25);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Velocity / Collisions
if (global.gamePaused) exit;

// TODO Move into Begin Step so that it doesn't look like this is lagging
if (attachedEntity != noone)
{
    // We've landed in an object that moves
    //  just follow it
    
    // Unless it doesn't exist -- then fall
    if (!instance_exists(attachedEntity))
    {
        move_contact_solid(270, 2);
        attachedEntity = noone;
        vspd = 1;
        hspd = random_range(-0.5, 0.5);
        exit;
    }
    
    x += attachedEntity.x - attachedEntity.px;
    y += attachedEntity.y - attachedEntity.py;
}
else if (hspd != 0 || vspd != 0)
{
    // Handle vector through air
    var cx, cy, inst;
    
    // Calculate x/y speed including subpixels
    var ySign = sign(vspd);
    if (vspd &gt; 0)
        vsave += vspd - floor(vspd);
    else if (vspd &lt; 0)
        vsave += abs(vspd - ceil(vspd));
    
    if (vsave &gt;= 1)
        vsave = -1;
    
    var vrep = abs(vspd);
    if (vsave == -1)
    {
        ++vrep;
        vsave = 0;
    }
    
    var xSign = sign(hspd);
    if (hspd &gt; 0)
        hsave += hspd - floor(hspd);
    else if (hspd &lt; 0)
        hsave += abs(hspd - ceil(hspd));
    
    if (hsave &gt;= 1)
        hsave = -1;
    
    var hrep = abs(hspd);
    if (hsave == -1)
    {
        ++hrep;
        hsave = 0;
    }
    
    hrep = floor(hrep);
    vrep = floor(vrep);
    var maxReps = max(hrep, vrep);
    var collisionOccurred = false;
    
    // Move each pixel until a collision is detected
    for(var i = 0; i &lt; maxReps; ++i)
    {
        cx = x + lengthdir_x(6, angle);
        if (i &lt; vrep)
        {
            cy = y + lengthdir_y(6, angle);
            inst = collision_circle(cx, cy, 2, pStaticSolid, false, true);
            if (inst != noone)
            {
                collisionOccurred = true;
                hspd = 0;
                vspd = 0;
                
                break;
            }

            y += ySign;
        }
        
        cy = y + lengthdir_y(6, angle);
        if (i &lt; hrep)
        {
            cx = x + lengthdir_x(6, angle);
            inst = collision_circle(cx, cy, 2, pStaticSolid, false, true);
            if (inst != noone)
            {
                collisionOccurred = true;
                hspd = 0;
                vspd = 0;

                break;
            }

            x += xSign;
        }
    }
    
    if (collisionOccurred)
    {
        HandleArrowCollision(inst);
        exit;
    }
    
    hspd += weight *  cos(270 * pi / 180);
    vspd += weight * -sin(270 * pi / 180);
    
    if (hspd != 0 &amp;&amp; vspd != 0)
        angle = CalculateSmoothAngle(hspd, vspd, angle);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle idle collision with player

if (hspd == 0 &amp;&amp; vspd == 0 &amp;&amp; attachedEntity == noone)
{
    AddArrows(1);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy arrows that go out of bounds

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw arrow

draw_sprite_ext(sprite_index, 0, x, y, 1, 1, angle - 90, c_white, 1);

switch(statusEffect)
{
    case global.ITEM_Lantern:
        if (fireActive)
        {
            part_particles_create(
                global.dbFx_Flame,
                x + lengthdir_x(6, angle),
                y + lengthdir_y(6, angle),
                global.dbFx_Flame_Type,
                3
            );
        }
        break;
        
    case global.ITEM_Bomb:
        draw_sprite_ext(sItemIcons16, 2, x + lengthdir_x(6, angle), y + lengthdir_y(6, angle), 0.75, 0.75, angle - 180, c_white, 1);
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
