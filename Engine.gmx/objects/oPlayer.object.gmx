<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_dude_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>pPlatformingEntity</parentName>
  <maskName>s_dude_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PLAYER_NUMBER = 1;

strength = 0;
invincible = false;

currentArrowStatusEffect = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle death

instance_create(0, 0, oDeathOverlay);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset invincibility
invincible = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle death

if (global.hp &lt;= 0 &amp;&amp; alarm[1] &lt; 0 &amp;&amp; !instance_exists(oDeathOverlay))
{
    alarm[1] = 2 * room_speed;
}

// Don't do anything if we have no health and have run our timer out
if (global.hp == 0)
{
    sprite_index = s_dude_dead;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle platforming

if (global.DBG_NoClip)
{
    var spd = iff(keyboard_check(vk_shift), 10, 4);
    x += (CheckKey(global.k_right, E_DOWN) - CheckKey(global.k_left, E_DOWN)) * spd;
    y += (CheckKey(global.k_down, E_DOWN) - CheckKey(global.k_up, E_DOWN)) * spd;
    
    if (keyboard_check(vk_space))
        global.DBG_NoClip = false;
}
else
    event_inherited();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image Handling

// Draw the appropriate sprites:
if (place_meeting(x, y+1, pStaticSolid) || (collision_line(x, y, x, y + yspeed + 1, pJumpThrough, false, true) != noone &amp;&amp; yspeed &gt;= 0)) {
  if (xspeed == 0) {
    // Idle.
    sprite_index = s_dude_idle;
  }
  else {
    // Running.
    if (sign(xspeed) == sign(dir)) {
      sprite_index = s_dude_run;
    }
    // Skidding.
    else {
      sprite_index = s_dude_skid;
    }
  }
}
else {
  // Jumping.
  sprite_index = s_dude_jump;
  image_index = 1 + sign(yspeed);
  if (abs(yspeed) &lt; 2) {
    image_index = 1;
  }
}
// Landing.
if (landing &gt; 0) {
  landing -= 1;
  sprite_index = s_dude_land;
}
// Climbing.
if (isClimbing) {
    sprite_index = s_dude_climb;
    if (dismount &lt; dismount_max &amp;&amp; yspeed == 0) {
      sprite_index = s_dude_climb_off;
    }
    if (!place_meeting(x, y-8, oDBGLadder) &amp;&amp; !place_meeting(x, y-8, oVine)) {
      sprite_index = s_dude_climb_top;
    }
  
  image_index = floor(y/16); 
}

// Configure image speeds.
image_speed = 1.0;

if (sprite_index == s_dude_run || s_dude_gun_run) {
  image_speed = 0.2;
}

// Handle image direction.
image_xscale = dir;

if (global.hp &lt;= 0)
    sprite_index = s_dude_dead;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate Bow Strength

strength = point_distance(oPlayer.x, oPlayer.y, mouse_x, mouse_y) * 0.06;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Action Key handling

if (CheckKey(global.k_action, E_PRESS) &amp;&amp; !global.gamePaused &amp;&amp; global.interactionIcon == InteractionIcon.None)
{
    var item = GetEquippedItem(Slot.Primary);
    if (item == noone)
        exit;
    
    if (mouse_check_button(mb_left))
    {
        // Apply item to arrow
        switch(item[? 'db-item-index'])
        {
            case global.ITEM_Bomb:
                if (InventoryRemoveIndex(global.inventory, global.primaryItemIndex))
                    currentArrowStatusEffect = item[? 'db-item-index'];
                break;
                
            case global.ITEM_Lantern:
                currentArrowStatusEffect = item[? 'db-item-index'];
                break;
        }
    }
    else
    {
        // Do item mechanic
        UseEquippedItem(item);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.gamePaused) exit;
if (global.arrows &lt;= 0)
    exit;

var mx = oCursor.x;
var my = oCursor.y;
var rot = point_direction(x, y, mx, my);
var xx = x + lengthdir_x(28, rot);
var yy = y + lengthdir_y(28, rot);
var inst = instance_create(xx, yy, oArrow);
with(inst)
{
    angle = rot;
    hspd = lengthdir_x(other.strength, angle);
    vspd = lengthdir_y(other.strength, angle);
    statusEffect = other.currentArrowStatusEffect;
}
    
show_debug_message("strength = " + string(strength));

AddArrows(-1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset the arrow status effect
if (global.gamePaused) exit;

currentArrowStatusEffect = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle respawn after death

global.hp = 3 * POINTS_PER_HEART;
global.arrows = floor(global.maxArrows * 0.33);
RespawnToCheckpoint();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set off temporary invincibility

invincible = true;
alarm[0] = room_speed * 0.75;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Doors &amp; Checkpoint Respawning

if (global.respawningToCheckpoint)
{
    with(global.checkpointInstanceId)
    {
        other.x = x;
        other.y = y;
        break;
    }
    
    global.respawningToCheckpoint = false;
    
    part_particles_create(
        global.dbFx_MobSmoke,
        bbox_left + (bbox_right - bbox_left) / 2,
        bbox_top + (bbox_bottom - bbox_top) / 2,
        global.dbFx_MobSmoke_Type,
        5
    );
}
else if (global.destShrineId != noone)
{
    with(oShrine)
    {
        if (id == global.destShrineId)
        {
            other.x = x;
            other.y = y;
            break;
        }
    }
    
    global.destShrineId = noone;
    
    part_particles_create(
        global.dbFx_MobSmoke,
        bbox_left + (bbox_right - bbox_left) / 2,
        bbox_top + (bbox_bottom - bbox_top) / 2,
        global.dbFx_MobSmoke_Type,
        5
    );
}
else if (global.destLayerDoorName != '')
{
    with(oLayerDoor)
    {
        if (name == global.destLayerDoorName &amp;&amp;
            id != global.destLayerDoorId)
        {
            other.x = x;
            other.y = y;
            break;
        }
    }
    
    global.destLayerDoorName = '';
    global.destLayerDoorId = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Prevent player from leaving the playing area
x = xstart;
y = ystart;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invincible &amp;&amp; (alarm[0] % 15) &lt; 6)
    exit;

if (global.hp &lt;= 0)
{
    part_particles_create(
        global.dbFx_MobSmoke,
        bbox_left + (bbox_right - bbox_left) / 2,
        bbox_top + (bbox_bottom - bbox_top) / 2,
        global.dbFx_MobSmoke_Type,
        1
    );
    
    shader_set(shWhiteSprite);
    draw_self();
    shader_reset();
}
else
    draw_self();

var rot = point_direction(x, y, oCursor.x, oCursor.y);
var xx = x + lengthdir_x(16, rot);
var yy = y + lengthdir_y(16, rot);

draw_sprite_ext(sBow, 0, xx, yy, 1, 1, rot, c_white, 1);

if (mouse_check_button(mb_left))
{
    draw_sprite_ext(sArrow, 0, xx + lengthdir_x(12, rot), yy + lengthdir_y(12, rot), 1, 1, rot - 90, c_white, 1);
    
    switch(currentArrowStatusEffect)
    {
        case global.ITEM_Lantern:
            part_particles_create(
                global.dbFx_Flame,
                xx + lengthdir_x(17, rot),
                yy + lengthdir_y(17, rot),
                global.dbFx_Flame_Type,
                3
            );
            break;
            
        case global.ITEM_Bomb:
            draw_sprite_ext(sItemIcons16, 2, xx + lengthdir_x(17, rot), yy + lengthdir_y(17, rot), 0.75, 0.75, rot - 180, c_white, 1);
            break;
    }
    
    // Foresight
    draw_set_color(c_black);
    draw_primitive_begin(pr_linestrip);
    
    xx = x + lengthdir_x(28, rot);
    yy = y + lengthdir_y(28, rot);
    
    var angle = rot;
    var hspd = lengthdir_x(strength, angle);
    var vspd = lengthdir_y(strength, angle);
    
    for(var i = 0; i &lt; 100; ++i)
    {
        xx += hspd;
        yy += vspd;
        
        hspd += 0.3 *  cos(270 * pi / 180);
        vspd += 0.3 * -sin(270 * pi / 180);
        
        draw_vertex(xx, yy);
        
        if (hspd != 0 &amp;&amp; vspd != 0)
            angle = CalculateSmoothAngle(hspd, vspd, angle);
        
        var cx = xx + lengthdir_x(6, angle);
        var cy = yy + lengthdir_y(6, angle);
        
        // DEBUG Uncomment the code below if you want to see the arrow position at each step
        //draw_sprite_ext(sArrow, 0, xx, yy, 1, 1, angle - 90, c_white, 0.75);
        //draw_circle(cx, cy, 2, false);
        
        if (collision_circle(cx, cy, 2, pStaticSolid, false, true) != noone)
            break;
    }
    
    draw_primitive_end();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,24</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
