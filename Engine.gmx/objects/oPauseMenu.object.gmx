<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50010</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

if (instance_number(oPauseMenu) &gt; 1)
{
    instance_destroy();
    exit;
}

intensity = 0;
targetIntensity = 1;

selectedIndex = 0;

items[0] = 'Options';
items[1] = 'Return to Game';
items[2] = 'Exit to Main Menu';

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle input / Update intenzity

intensity = lerp(intensity, targetIntensity, 0.3);

if (targetIntensity == 0 &amp;&amp; intensity &lt; 0.02)
    instance_destroy();
    
if (targetIntensity == 0)
    exit;

if (CheckKey(global.k_toggle_pause_menu, E_PRESS))
{
    targetIntensity = 0;
}
else if (CheckKey(global.k_down, E_PRESS))
{
    ++selectedIndex;
    if (selectedIndex &gt;= array_length_1d(items))
        selectedIndex = 0;
}
else if (CheckKey(global.k_up, E_PRESS))
{
    --selectedIndex;
    if (selectedIndex &lt; 0)
        selectedIndex = array_length_1d(items) - 1;
}
else if (CheckKey(global.k_action, E_PRESS))
{
    switch(selectedIndex)
    {
        case 0: // Options
            break;
            
        case 1: // Resume Game
            targetIntensity = 0;
            break;
        
        case 2: // Return to Main Meun
            // TODO Return to main menu when one exists
            game_end();
            break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw pause menu

var OFFSET = 80;
var width = display_get_gui_width();
var height = display_get_gui_height();

draw_set_font(fItemOverlay_Header);
var LINE_HEIGHT = string_height('W');

draw_set_color(c_black);
draw_set_alpha(intensity);
draw_rectangle(0, 0, width, height, false);

draw_set_alpha(intensity * 2);
draw_set_color(c_white);

var itemCount = array_length_1d(items);
for(var i = 0; i &lt; itemCount; ++i)
{
    var xx = OFFSET;
    var yy = floor(height / 2 - (itemCount * LINE_HEIGHT * 2) / 2);
        yy += i * (LINE_HEIGHT * 2);
    
    draw_text(xx + 32, yy, items[i]);
    
    if (i == selectedIndex)
    {
        draw_sprite_ext(
            sDialogueFinishMarker, 0,
            xx, yy + 6,
            1, 1,
            get_timer() / 30000,
            c_white, intensity * 2
        );
    }
}

draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
