<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Use InitializePhysicsEntity</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Physics

/*
 *  This parent object enables children to havoc in the world properly.
 *  It is intended for objects that need to havoc but not platform.
 *  Examples: Bombs, Coins, Rubble, etc
 *  
 *  This does NOT include: Pushable blocks, moving blocks, mobs, etc
 */

angle = 0;              // Direction of vector (normal GM directionals)
velocity = 0;           // Velocity of vector
weight = 0;             // How much gravity affects this object
bouncy = true;          // If this entity will bounce when it hits the ground

maxBounces = 5;         // Maximum bounces - kind of a hack
maxVspd = 7;            // Maximum hspd - will lerp back to this if it goes above
maxHspd = 7;            // Maximum vspd - will lerp back to this if it goes above

bounceCount = 0;
hsave = 0;
vsave = 0;

// Initial calculation of hspd/vspd
hspd = lengthdir_x(velocity, angle);
vspd = lengthdir_y(velocity, angle);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle physics

if (hspd != 0 || vspd != 0)
{
    // Clamp velocities
    var absHspd = abs(hspd);
    if (absHspd &gt; maxHspd)
    {
        if (absHspd - maxHspd &lt; 1)
            hspd = maxHspd * sign(hspd);
        else
            hspd = lerp(hspd, maxHspd * sign(hspd), 0.01);
    }
    
    var absVspd = abs(vspd);
    if (absVspd &gt; maxVspd)
    {
        if (absVspd - maxVspd &lt; 1)
            vspd = maxVspd * sign(vspd);
        else
            vspd = lerp(vspd, maxVspd * sign(vspd), 0.01);
    }
    
    // Calculate x/y speed including subpixels
    var ySign = sign(vspd);
    if (vspd &gt; 0)
        vsave += vspd - floor(vspd);
    else if (vspd &lt; 0)
        vsave += abs(vspd - ceil(vspd));
    
    if (vsave &gt;= 1)
        vsave = -1;
    
    var vrep = abs(vspd);
    if (vsave == -1)
    {
        ++vrep;
        vsave = 0;
    }
    
    var xSign = sign(hspd);
    if (hspd &gt; 0)
        hsave += hspd - floor(hspd);
    else if (hspd &lt; 0)
        hsave += abs(hspd - ceil(hspd));
    
    if (hsave &gt;= 1)
        hsave = -1;
    
    var hrep = abs(hspd);
    if (hsave == -1)
    {
        ++hrep;
        hsave = 0;
    }
    
    hrep = floor(hrep);
    vrep = floor(vrep);
    
    // Move each pixel until a collision is detected
    repeat(vrep)
    {
        if (!place_free(x, y + sign(vspd)))
        {
            if (vspd &lt; 0) // Bounce off ceilings
                vspd = -vspd * 0.9;
            else
            {
                // If hspd or vspd is really low and we're hitting the ground then
                // just stop hspd and vspd. This is so we stop doing havoc calculations
                if (hspd &lt;= 0.5)
                    hspd = 0;
                
                if (vspd &lt;= 0.5 || (bouncy &amp;&amp; bounceCount &gt; maxBounces))
                {
                    move_contact_solid(270, sprite_height);
                    vspd = 0;
                    exit;
                }
                
                if (bouncy)
                {
                    // Bounce off a floor if we're bouncy
                    vspd = -vspd * 0.55;
                    hspd *= 0.8;
                    ++bounceCount;
                }
                else
                {
                    // Otherwise just stick there
                    vspd = 0;
                    move_contact_solid(270, sprite_height);
                    exit;
                }
            }
        }

        y += sign(vspd);
    }
    
    repeat(hrep)
    {
        if (!place_free(x + sign(hspd), y))
            hspd = -hspd * 0.8;
        
        x += sign(hspd);
    }
    
    hspd += weight * lengthdir_x(velocity, 270);
    vspd += weight * lengthdir_y(velocity, 270);
}
else if (place_free(x, y + 1))
{
    velocity = 1;
    vspd = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
