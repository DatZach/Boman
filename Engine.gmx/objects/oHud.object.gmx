<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Overlay

enum HudMenuTab {
    Inventory,
    KnickKnacks,
    Relics,
    Count
}

if (instance_number(oHud) &gt; 1)
{
    instance_destroy();
    exit;
}

// CONSTANTS
itemRubyWidth = sprite_get_width(sHudItemRuby);
itemRubyHeight = sprite_get_height(sHudItemRuby);
brokenArrowHeight = sprite_get_height(sHudBrokenArrow);
heartHeight = sprite_get_height(sHudHeart);
heartWidth = sprite_get_width(sHudHeart);
arrowWidth = sprite_get_width(sHudArrow) / 3;
goldWidth = sprite_get_width(sHudGoldPile);
goldHeight = sprite_get_height(sHudGoldPile);
keyWidth = sprite_get_width(sHudKey);
keyHeight = sprite_get_height(sHudKey);

sIOItemRuby_Width = sprite_get_width(sIOItemRuby);
sIOItemRuby_Height = sprite_get_height(sIOItemRuby);
sIOHeartContainer_Width = sprite_get_width(sIOHeartContainer);
sIOHeartContainer_Height = sprite_get_height(sIOHeartContainer);
sIOIcons_Width = sprite_get_width(sIOIcons);
sIOIcons_Height = sprite_get_height(sIOIcons);

outlineColor = make_color_rgb(107, 126, 136);
selectColor = make_color_rgb(103, 161, 219);
blackColor = make_color_rgb(28, 30, 32);
whiteColor = make_color_rgb(252, 250, 233);

// INTERACTIVE NOTIFICATION
enum InteractionIcon {
    None            = -1,
    Hand            = 0,
    UpArrow,
    DownArrow,
    View,
    Key,
    Deny
}

global.interactionIcon = InteractionIcon.None;
global.interactionText = '';

// TOAST VARIABLES
toasts = ds_list_create();

// ITEM MENU VARIABLES
itemOverlayEnabled = false;
menuTabIndex = HudMenuTab.Inventory;
itemIndex = 0;
windowOffset = 0;

intensity = 0;
targetIntensity = 0;
enabled = true;

//FxInitializeDesaturatedBlur();
display_set_gui_size(VIEW_WIDTH, VIEW_HEIGHT);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear all toasts

var count = ds_list_size(toasts);
for(var i = 0; i &lt; count; ++i)
{
    var toast = toasts[| i];
    toast[? 'frame-inc'] = -1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear interaction notification

global.interactionIcon = InteractionIcon.None;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update toasts

var count = ds_list_size(toasts);
for(var i = 0; i &lt; count; ++i)
{
    var toast = toasts[| i];
    toast[? 'frames'] += toast[? 'frame-inc'];
    
    if (toast[? 'frames'] &lt;= 0)
    {
        ds_map_destroy(toast);
        ds_list_delete(toasts, i);
        --count;
        ++i;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update desaturated-blur intensity / Game Paused

intensity = lerp(intensity, targetIntensity, 0.25);
enabled = intensity &gt; 0.01;

global.gamePaused = enabled
                 || (!RELEASE_MODE &amp;&amp; ConsoleActive(oController.debugConsole))
                 || instance_exists(oDialogue);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle input

if (instance_exists(oDialogue))
    exit;

if (CheckKey(global.k_toggle_item_overlay, E_PRESS))
{
    itemOverlayEnabled = !itemOverlayEnabled;
    targetIntensity = iff(itemOverlayEnabled, 0.7, 0);
}

var inventory = noone;
if (menuTabIndex == HudMenuTab.Inventory)
    inventory = global.inventory;
else if (menuTabIndex == HudMenuTab.KnickKnacks)
    inventory = global.knickKnacks;

if (enabled)
{
    if (CheckKey(global.k_down, E_PRESS) &amp;&amp; inventory != noone)
    {
        var OFFSET = 12;
        var top = OFFSET;
        var bottom = display_get_gui_height() - OFFSET;
        var windowCount = floor(((bottom - itemRubyHeight + 3 - OFFSET - 20) - (top + sIOIcons_Height + 4 + 6)) / 20);
        
        ++itemIndex;
        if (itemIndex &gt;= ds_list_size(inventory))
        {
            itemIndex = 0;
            windowOffset = 0;
        }
        
        if (itemIndex - windowOffset &gt; windowCount)
            ++windowOffset;
    }
    else if (CheckKey(global.k_up, E_PRESS) &amp;&amp; inventory != noone)
    {
        var OFFSET = 12;
        var top = OFFSET;
        var bottom = display_get_gui_height() - OFFSET;
        var windowCount = floor(((bottom - itemRubyHeight + 3 - OFFSET - 20) - (top + sIOIcons_Height + 4 + 6)) / 20);
        
        --itemIndex;
        if (itemIndex &lt; 0)
        {
            itemIndex = ds_list_size(inventory) - 1;
            windowOffset = ds_list_size(inventory) - windowCount - 1;
        }
        
        if (itemIndex - windowOffset &lt; 0)
            --windowOffset;
    }
    else if (CheckKey(global.k_right, E_PRESS))
    {
        itemIndex = 0;
        windowOffset = 0;
        
        ++menuTabIndex;
        if (menuTabIndex &gt;= HudMenuTab.Count)
            menuTabIndex = 0;
    }
    else if (CheckKey(global.k_left, E_PRESS))
    {
        itemIndex = 0;
        windowOffset = 0;

        --menuTabIndex;
        if (menuTabIndex &lt; 0)
            menuTabIndex = HudMenuTab.Count - 1;
    }
    else if (CheckKey(global.k_action, E_PRESS) &amp;&amp; inventory == global.inventory &amp;&amp;
             (itemIndex &gt; 0 || itemIndex &lt; ds_list_size(inventory)))
    {
        var item = inventory[| itemIndex];
        var itemMeta = global.dbItems[| item[? 'db-item-index']];
        
        if (ItemIsType(itemMeta, ItemType.Consumable))
            ConsumeItem(itemIndex);
        else if (ItemIsType(itemMeta, ItemType.Equipable))
        {
            // Prevent us from using a BUNCH of memory for no reason
            if (ds_stack_size(global.equipStack) &gt; 16)
            {
                ds_stack_clear(global.equipStack)
                ds_stack_push(global.equipStack, noone);
            }
            
            if (ds_stack_top(global.equipStack) != global.primaryItemIndex)
                ds_stack_push(global.equipStack, global.primaryItemIndex);
                
            global.primaryItemIndex = itemIndex;
            
            show_debug_message(concat('Equipped item-index ', global.primaryItemIndex, '; stack = ', ds_stack_size(global.equipStack)));
        }
    }
}

if (inventory != noone)
{
    var len = max(ds_list_size(inventory) - 1, 0);
    itemIndex = median(0, itemIndex, len);
    windowOffset = median(0, windowOffset, len);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//view_surface_id[0] = surf[2];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw overlay - Toasts

var OFFSET = 12;
var TOAST_HEIGHT = 19;
var toastY = OFFSET;
var toastX = OFFSET;

var count = ds_list_size(toasts);
for(var i = 0; i &lt; count; ++i)
{
    var toast = toasts[| i];
    var frames = toast[? 'frames'];
    var itemMeta = global.dbItems[| toast[? 'item-index']];
    var name = itemMeta[? 'name'];
    
    draw_set_font(fItemOverlay_Item);
    var width = floor(max(125, string_width(name) + 32));
    var rectWidth = width - 49 * 2;
    
    var alphaMul = min(8, frames) / 8;
    var slideOffset = ((8 - min(8, frames)) / 8) * width;
    var tX = floor(toastX - slideOffset);
    
    // Draw toast backdrop
    draw_set_alpha(0.55 * alphaMul);
    draw_set_color(blackColor);
    draw_sprite(sToast, 0, tX, toastY);
    draw_rectangle(tX + 49, toastY, tX + 49 + rectWidth - 1, toastY + 19 - 1, false);
    draw_sprite(sToast, 1, tX + 49 + rectWidth, toastY);
    draw_set_alpha(1 * alphaMul);
    
    // Draw name
    draw_set_color(whiteColor);
    draw_set_valign(fa_middle);
    draw_text_outline(tX + 8, toastY + TOAST_HEIGHT / 2, name, 1, outlineColor, 4);
    draw_set_valign(fa_top);
    
    // Draw icon
    draw_sprite(sItemIcons16, itemMeta[? 'image-index'], tX + width - 8, toastY + TOAST_HEIGHT / 2 - 1);
    
    draw_set_alpha(1);
    
    toastY += TOAST_HEIGHT + 6;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw overlay - Items

if (enabled)
{

var OFFSET = 12;

var width = display_get_gui_width();
var height = display_get_gui_height();
var left = OFFSET;
var top = OFFSET;
var right = width - OFFSET;
var bottom = height - OFFSET;

// Obscure game world
draw_set_color(c_black);
draw_set_alpha(intensity);
draw_rectangle(0, 0, width, height, false);

//FxInitializeDesaturatedBlur();

draw_set_alpha(intensity * 2);

// Draw passive items view
for(var i = 0; i &lt; 3; ++i)
    draw_sprite(sIOItemRuby, 0, left, top + (sIOItemRuby_Height + OFFSET) * i);

draw_sprite(sIOHeartContainer, global.heartPieces, left, top + (sIOHeartContainer_Height + OFFSET) * 3 + OFFSET * 2);

// Draw item list header
var left2 = left + sIOItemRuby_Width + OFFSET;
var xx = left2;
var headerWidths;
headerWidths[4] = 0;
headerWidths[0] = xx;

draw_set_color(c_white);
draw_set_font(fItemOverlay_Header);
draw_set_valign(fa_middle);

draw_sprite(sIOIcons, 0, xx, top);
xx += sIOIcons_Width + 4;
draw_text_outline(xx, top + sIOIcons_Height / 2 + 2, "Knap Sack", 2, outlineColor, 4);
xx += string_width("Knap Sack");
xx += 8;
headerWidths[1] = xx;

draw_sprite(sIOIcons, 1, xx, top);
xx += sIOIcons_Width + 4;
draw_text_outline(xx, top + sIOIcons_Height / 2 + 2, "Knick-Knacks", 2, outlineColor, 4);
xx += string_width("Knick-Knacks");
xx += 8;
headerWidths[2] = xx;

draw_sprite(sIOIcons, 2, xx, top);
xx += sIOIcons_Width + 4;
draw_text_outline(xx, top + sIOIcons_Height / 2 + 2, "Relics", 2, outlineColor, 4);
xx += string_width("Relics");
xx += 8;
headerWidths[3] = xx;

draw_set_valign(fa_top);

// Draw item list header line
draw_set_color(c_white);
var itemListHeaderLineY = top + sIOIcons_Height + 4;
draw_line_width(left2, itemListHeaderLineY, xx, itemListHeaderLineY, 2);
draw_set_color(selectColor);
draw_line_width(headerWidths[menuTabIndex], itemListHeaderLineY, headerWidths[menuTabIndex + 1] - 8, itemListHeaderLineY, 2);
draw_set_color(c_white);

if (menuTabIndex != HudMenuTab.Relics)
{
    // Draw inventory
    var inventory = iff(menuTabIndex == HudMenuTab.Inventory, global.inventory, global.knickKnacks);
    var itemMenuX = left2 + 5;
    var itemMenuY = top + sIOIcons_Height + 4 + 6;
    var itemMenuHeight = bottom - itemRubyHeight + 3 - OFFSET - 20;
    var inventorySize = ds_list_size(inventory);
    
    draw_set_font(fItemOverlay_Item);
    draw_set_valign(fa_middle);
    
    // Highlight selected item
    if (inventorySize &gt; 0)
    {
        var selectedItemIndexY = itemMenuY - 1 + (itemIndex - windowOffset) * 20;
        draw_set_color(selectColor);
        draw_set_alpha(intensity / targetIntensity * 0.5);
        draw_rectangle(left2, selectedItemIndexY, headerWidths[3], selectedItemIndexY + 17, false);
        draw_set_alpha(intensity * 2);
        draw_rectangle(left2, selectedItemIndexY, left2 + 2, selectedItemIndexY + 17, false);
    }
    
    draw_set_color(c_white);
    
    // Draw items in inventory
    var i = windowOffset;
    for(; i &lt; inventorySize &amp;&amp; itemMenuY &lt; itemMenuHeight; ++i)
    {
        var item = inventory[| i];
        var itemMeta = global.dbItems[| item[? 'db-item-index']];
        
        draw_sprite(sItemIcons16, itemMeta[? 'image-index'], itemMenuX + 8, itemMenuY + 8);
        draw_text(itemMenuX + 16 + 5, itemMenuY + 9, itemMeta[? 'name']);
        
        var txx = headerWidths[3] - 2;
        
        draw_set_halign(fa_right);
        
        if (i == itemIndex)
        {
            // ITEM SELECTED
            
            if (ItemIsType(itemMeta, ItemType.Equipable))
            {
                var displayText = concat(GetKeyNameU(global.k_action), '  |  Equip &gt;');
                draw_text(txx, itemMenuY + 9, displayText);
                
                txx -= string_width(displayText) + 16;
            }
            else if (ItemIsType(itemMeta, ItemType.Consumable))
            {
                var displayText = concat(GetKeyNameU(global.k_action), '  |  Consume &gt;');
                draw_text(txx, itemMenuY + 9, displayText);
                
                txx -= string_width(displayText) + 16;
            }
        }
        
        if (ItemIsType(itemMeta, ItemType.Stackable))
        {
            var maxStock = item[? 'max-stock'];
            var stockMsg = iff(
                maxStock &gt; 0,
                concat(item[? 'stock'], ' / ', maxStock, ' Stock'),
                concat(item[? 'stock'], ' Stock')
            );
            
            draw_text(txx, itemMenuY + 9, stockMsg);
        }
        
        draw_set_halign(fa_left);
        
        itemMenuY += 20;
    }
    
    if (i &lt; inventorySize)
    {
        var displayText = concat(inventorySize - i, ' More Items');
        var itemMenuCenterX = (headerWidths[3] - itemMenuX) / 2 + itemMenuX;
        var messageWidth = string_width(displayText);
        
        draw_set_halign(fa_center);
        draw_text(itemMenuCenterX, itemMenuY + 9, displayText);
        draw_set_halign(fa_left);
        
        draw_line_width(itemMenuX, itemMenuY + 8, itemMenuCenterX - messageWidth / 2 - 8, itemMenuY + 8, 2);
        draw_line_width(itemMenuCenterX + messageWidth / 2 + 8, itemMenuY + 8, headerWidths[3], itemMenuY + 8, 2);
    }
    
    draw_set_valign(fa_top);
    
    // Draw item preview
    if (inventorySize != 0 &amp;&amp; itemIndex &lt; inventorySize)
    {
        var left3 = headerWidths[3] + OFFSET;
        var ipCenterX = left3 + (right - left3) / 2 - 12;
        var ipCenterY = top + 24 + OFFSET + 64;
        
        var item = inventory[| itemIndex];
        var itemMeta = global.dbItems[| item[? 'db-item-index']];
        
        draw_sprite(sItemIcons24, itemMeta[? 'image-index'], ipCenterX, ipCenterY);
        
        draw_set_halign(fa_center);
        draw_text_outline_width(ipCenterX, ipCenterY + OFFSET + 64, itemMeta[? 'name'] + '##' + itemMeta[? 'description'], 1, outlineColor, 8, (VIEW_WIDTH - OFFSET - left3));
        draw_set_halign(fa_left);
    }
    else
    {
        var itemMenuCenterX = (headerWidths[3] - itemMenuX) / 2 + itemMenuX;
        var itemMenuCenterY = (itemMenuHeight - itemMenuY) / 2 + itemMenuY;
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_outline(itemMenuCenterX, itemMenuCenterY, "*Cricket Noises*", 2, outlineColor, 4);
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
    }
}
else
{
    // Draw Relics
}

draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw overlay - Game

var OFFSET = 12;
var xx = OFFSET;
var yy = display_get_gui_height() - OFFSET;
var xxr = display_get_gui_width() - OFFSET;

draw_set_font(fHudOverlay);

// Item Ruby &amp; Arrow pieces indicator
draw_sprite(sHudItemRuby, 0, xx, yy - itemRubyHeight);
draw_sprite(sHudBrokenArrow, global.arrowSegments, xx + itemRubyWidth / 2, yy - itemRubyHeight - OFFSET - brokenArrowHeight);

if (global.primaryItemIndex != noone)
{
    var item = global.inventory[| global.primaryItemIndex];
    var itemMeta = global.dbItems[| item[? 'db-item-index']];
    
    draw_sprite(sItemIcons24, itemMeta[? 'image-index'], xx + itemRubyWidth / 2, yy - itemRubyHeight / 2);
    if (HasFlag(itemMeta[? 'type'], ItemType.Stackable))
    {
        draw_set_color(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_outline(xx + 38, yy - itemRubyHeight + 42, string(item[? 'stock']), 2, outlineColor, 4);
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
    }
}

// Hearts
var fullHearts = floor(global.hp / POINTS_PER_HEART);
for(var i = 0; i &lt; global.maxHp / POINTS_PER_HEART; ++i)
{
    var chp = (global.hp - i * POINTS_PER_HEART) % POINTS_PER_HEART;
    if (i &gt; fullHearts)
        chp = 0;
    else if (i &lt; fullHearts)
        chp = POINTS_PER_HEART;
    
    draw_sprite(sHudHeart, chp, xx + itemRubyWidth + 8 + i * (heartWidth + 2), yy - itemRubyHeight + 3);
}

// Arrows
draw_set_color(make_color_rgb(35, 46, 46));
draw_rectangle(
    xx + itemRubyWidth + 12,
    yy - itemRubyHeight + heartHeight + 14 + 4,
    xx + itemRubyWidth + 1 + global.maxArrows * arrowWidth,
    yy - itemRubyHeight + heartHeight + 14 + 4 + 3,
    false
);

for(var i = global.maxArrows - 1; i &gt;= 0; --i)
{
    draw_sprite(sHudArrow, i &gt;= global.arrows, xx + itemRubyWidth + i * arrowWidth, yy - itemRubyHeight + heartHeight + 11);
}

// Gold
draw_sprite(sHudGoldPile, 0, xxr - goldWidth, yy - goldHeight);
draw_set_color(c_white);
draw_set_halign(fa_right);
draw_text_outline(xxr - goldWidth - 4, yy - goldHeight + 6, string(global.gold), 2, outlineColor, 4);
draw_set_halign(fa_left);

// Dungeon Keys
if (GuiGetShowKeyCount())
{
    draw_sprite(sHudKey, 0, xxr - keyWidth, yy - goldHeight - 3 - keyHeight);
    draw_set_color(c_white);
    draw_set_halign(fa_right);
    draw_text_outline(xxr - keyWidth - 4, yy - goldHeight - 3 - keyHeight + 6, string(GetRoomKeyCount()), 2, outlineColor, 4);
    draw_set_halign(fa_left);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw overlay - Interactive Action Toast

if (global.interactionIcon != InteractionIcon.None)
{
    var xx = oPlayer.x;
    var yy = oPlayer.bbox_bottom + 4;
    
    draw_set_color(whiteColor);
    draw_set_font(fHudOverlay);
    var textWidth = string_width(global.interactionText);
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_outline(xx + (18 + 4) / 2, yy + 18 / 2 + 2, global.interactionText, 2, blackColor, 8);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    
    draw_sprite(sInteractIcons18, global.interactionIcon, xx - 18 / 2 - 4 - textWidth / 2, yy);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
